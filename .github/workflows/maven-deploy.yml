# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Maven Deploy

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      comment:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Comment for deploy'
        # Default value if no value is explicitly provided
        default: 'Deploy SNAPSHOT from WEB UI'
        # Input has to be provided for the workflow to run
        required: true

env:
  PROJECT_NAME: ${GITHUB_REPOSITORY#*/}
  DOCKER_BAKE_PLATFORM: linux/amd64,linux/arm64

jobs:
  build:
    runs-on: ubuntu-latest

    steps:

      # https://github.com/actions/checkout
      - name: Checkout
        uses: actions/checkout@v3

      # https://github.com/actions/setup-java
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      # Maven script [ deploy ]
      - name: Publish to GitHub Packages Apache Maven
        run: mvn deploy -s $GITHUB_WORKSPACE/.github/.m2/settings.xml
        env:
          GITHUB_TOKEN: '${{ secrets.GH_TOKEN_TECHUSER_JAVA }}'
          OSSRH_USERNAME: '${{ secrets.OSS_SONATYPE_ORG_USER }}'
          OSSRH_PASSWORD: '${{ secrets.OSS_SONATYPE_ORG_PASSWORD }}'


  docker-build:
    runs-on: ubuntu-latest
    needs:
      - build

    steps:

      # Get version from POM_XML_PROJECT_VERSION
      - id: getVersion
        name: getVersion into POM_XML_PROJECT_VERSION variable
        run: |
          PROJECT_VERSION=`echo -e 'setns x=http://maven.apache.org/POM/4.0.0\ncat /x:project/x:version/text()' | xmllint --shell pom.xml | grep -v /`
          echo "PROJECT_VERSION=${PROJECT_VERSION}" >> $GITHUB_OUTPUT

      # Set RELEASED_VERSION
      - id: prepare
        name: Set RELEASED_VERSION into etc/release/.env
        run: |
          echo "RELEASED_VERSION="${{steps.getVersion.outputs.PROJECT_VERSION}} >> etc/release/.env

      # https://github.com/docker/docker/login-action
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      # https://github.com/docker/bake-action
      - name: docker buildx bake services
        uses: docker/bake-action@v4
        with:
          set: |
            *.platform=${{ env.DOCKER_BAKE_PLATFORM }}
          push: true
          files: |
            etc/release/docker-compose.yml
          targets: qs-rest-service-release
